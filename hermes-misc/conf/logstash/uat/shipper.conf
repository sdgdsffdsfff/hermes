input{
#kafka
 file {
     path => "/opt/logs/kafka/controller.log"
     type => "kafka.controller"
     }
 file {
     path => "/opt/logs/kafka/kafka-request.log"
     type => "kafka.request"
 }
 file {
     path => "/opt/logs/kafka/kafkaServer-gc.log"
     type => "kafka.gc"
 }
 file {
     path => "/opt/logs/kafka/log-cleaner.log"
     type => "kafka.log-cleaner"
 }
 file {
     path => "/opt/logs/kafka/server.log"
     type => "kafka.server"
 }
 file {
     path => "/opt/logs/kafka/state-change.log"
     type => "kafka.statechange"
 }
 file {
     path => "/opt/ctrip/app/rest-tomcat/logs/catalina.out"
     type => "tomcat"
     codec => multiline {
       pattern => "(^\d+\serror)|(^.+Exception: .+)|(^\s+at .+)|(^\s+... \d+ more)|(^\s*Caused by:.+)"
       what => "previous"
     }
 }
 file {
 	 path => "/opt/logs/hermes-rest/hermes-rest.log"
 	 type => "rest"
 }
 file {
     path => "/opt/logs/hermes-rest/biz.log"
     type => "biz"
     codec => "json"
 }
 file {
  	 path => "/opt/logs/hermes-broker/hermes-broker.log"
 	 type => "broker"
 }
 file {
  	 path => "/opt/logs/hermes-broker/biz.log"
 	 type => "biz"
 	 codec => "json"
 }
 file {
 	 path => "/opt/logs/hermes-portal/hermes-portal.log"
 	 type => "portal"
 }
 file {
 	 path => "/opt/logs/hermes-metaserver/hermes-metaserver.log"
 	 type => "metaserver"
 }
}
filter {
	if [type] == "tomcat" and [message] !~ /(.+)/ {
    	drop { }
  	}
  	if [type] == "tomcat" and "multiline" in [tags] {
    	grok {
      	match => [ "message", "%{JAVASTACKTRACEPART}" ]
    	}
  	}
}
output{
    elasticsearch {
        cluster => "hermes-es-uat"
    }
    kafka{
        topic_id => "logstash_logs"
        broker_list => "10.2.27.123:9092,10.2.27.124:9092,10.2.27.125:9092"
        partition_key_format => "%{host}"
    }
}
